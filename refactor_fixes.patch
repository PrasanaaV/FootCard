diff --git a/ios/chrome/browser/shared/public/features/features.h b/ios/chrome/browser/shared/public/features/features.h
index 64034d00..d3216d3 100644
--- a/ios/chrome/browser/shared/public/features/features.h
+++ b/ios/chrome/browser/shared/public/features/features.h
@@ -1043,9 +1043,9 @@ BASE_DECLARE_FEATURE(kAutofillUseTwoBoxForAddressSuggestions);
 #endif  //  IOS_CHROME_BROWSER_AUTOFILL_ADDRESS_AUTOFILL_ADDRESSES_DELEGATE_H_

 BASE_DECLARE_FEATURE(kFullscreenTransition);
 BASE_DECLARE_FEATURE(kRefactorToolbarUI);

-bool RefactorToolbarUIEnabled();
+bool IsRefactorToolbarUIEnabled();

 #endif  // IOS_CHROME_BROWSER_SHARED_PUBLIC_FEATURES_FEATURES_H_
diff --git a/ios/chrome/browser/shared/public/features/features.mm b/ios/chrome/browser/shared/public/features/features.mm
index 97df53d..82a6797 100644
--- a/ios/chrome/browser/shared/public/features/features.mm
+++ b/ios/chrome/browser/shared/public/features/features.mm
@@ -1267,11 +1267,10 @@ BASE_FEATURE(kNewTabRenovationsIPH,
              base::FEATURE_DISABLED_BY_DEFAULT);

 BASE_FEATURE(kFullscreenTransition,
              "FullscreenTransition",
              base::FEATURE_DISABLED_BY_DEFAULT);
 BASE_FEATURE(kRefactorToolbarUI,
              "RefactorToolbarUI",
-             base::FEATURE_DISABLED_BY_DEFAULT);

-bool RefactorToolbarUIEnabled() {
+             base::FEATURE_DISABLED_BY_DEFAULT);

+bool IsRefactorToolbarUIEnabled() {
   return base::FeatureList::IsEnabled(kRefactorToolbarUI);
 }
diff --git a/ios/chrome/browser/browser_view/ui_bundled/browser_view_controller.mm b/ios/chrome/browser/browser_view/ui_bundled/browser_view_controller.mm
index b84b213..fefcc287 100644
--- a/ios/chrome/browser/browser_view/ui_bundled/browser_view_controller.mm
+++ b/ios/chrome/browser/browser_view/ui_bundled/browser_view_controller.mm
@@ -1985,14 +1985,14 @@ - (void)viewWillAppear:(BOOL)animated {
 // Updates the ToolbarUIState, which broadcasts any changes to registered
 // listeners.
 - (void)updateToolbarState {
-  if (RefactorToolbarUIEnabled()) {
-    [_toolbarUIState setterCollapsedTopToolbarHeight:[self collapsedTopToolbarHeight]];
-    [_toolbarUIState setterExpandedTopToolbarHeight:[self expandedTopToolbarHeight]];
-    [_toolbarUIState setterCollapsedBottomToolbarHeight:[self collapsedBottomToolbarHeight]];
-    [_toolbarUIState setterExpandedBottomToolbarHeight:[self secondaryToolbarHeightWithInset]];
+  if (IsRefactorToolbarUIEnabled()) {
+    [_toolbarUIState setCollapsedTopToolbarHeight:[self collapsedTopToolbarHeight]];
+    [_toolbarUIState setExpandedTopToolbarHeight:[self expandedTopToolbarHeight]];
+    [_toolbarUIState setCollapsedBottomToolbarHeight:[self collapsedBottomToolbarHeight]];
+    [_toolbarUIState setExpandedBottomToolbarHeight:[self secondaryToolbarHeightWithInset]];
     self.fullscreenController->setToolbarUIState(_toolbarUIState);
     return;
   }
diff --git a/ios/chrome/browser/contextual_panel/coordinator/panel_content_coordinator.mm b/ios/chrome/browser/contextual_panel/coordinator/panel_content_coordinator.mm
index 82b7cd8..17f3a1f 100644
--- a/ios/chrome/browser/contextual_panel/coordinator/panel_content_coordinator.mm
+++ b/ios/chrome/browser/contextual_panel/coordinator/panel_content_coordinator.mm
@@ -54,8 +54,8 @@ - (void)start {
   ChromeBroadcaster* broadcaster =
       FullscreenController::FromBrowser(self.browser)->broadcaster();

-  _mediator = [[PanelContentMediator alloc] initWithBroadcaster:broadcaster
-                                         initWithToolbarUIState:toolbarUIState];
+  _mediator = [[PanelContentMediator alloc] initWithBroadcaster:broadcaster
+                                                toolbarUIState:toolbarUIState];
   _mediator.consumer = _viewController;

   _modulators = [[NSMutableArray alloc] init];
diff --git a/ios/chrome/browser/contextual_panel/coordinator/panel_content_mediator.h b/ios/chrome/browser/contextual_panel/coordinator/panel_content_mediator.h
index 7cc12e0..580a113 100644
--- a/ios/chrome/browser/contextual_panel/coordinator/panel_content_mediator.h
+++ b/ios/chrome/browser/contextual_panel/coordinator/panel_content_mediator.h
@@ -13,8 +13,8 @@

 @interface PanelContentMediator : NSObject

-- (instancetype)initWithBroadcaster:(ChromeBroadcaster*)broadcaster
-             initWithToolbarUIState:(ToolbarUIState*)toolbarUIState
+- (instancetype)initWithBroadcaster:(ChromeBroadcaster*)broadcaster
+                      toolbarUIState:(ToolbarUIState*)toolbarUIState
     NS_DESIGNATED_INITIALIZER;
 - (instancetype)init NS_UNAVAILABLE;
diff --git a/ios/chrome/browser/contextual_panel/coordinator/panel_content_mediator.mm b/ios/chrome/browser/contextual_panel/coordinator/panel_content_mediator.mm
index 44c4b55..b14a60e 100644
--- a/ios/chrome/browser/contextual_panel/coordinator/panel_content_mediator.mm
+++ b/ios/chrome/browser/contextual_panel/coordinator/panel_content_mediator.mm
@@ -19,14 +19,14 @@
 @implementation PanelContentMediator {
   __weak ChromeBroadcaster* _broadcaster;
   __weak ToolbarUIState* _toolbarUIState;
   std::unique_ptr<ToolbarUIObserverBridge> _toolbarUIObserverBridge;
 }

-- (instancetype)initWithBroadcaster:(ChromeBroadcaster*)broadcaster
-             initWithToolbarUIState:(ToolbarUIState*)toolbarUIState {
+- (instancetype)initWithBroadcaster:(ChromeBroadcaster*)broadcaster
+                      toolbarUIState:(ToolbarUIState*)toolbarUIState {
   self = [super init];
   if (self) {
-    if (RefactorToolbarUIEnabled()) {
+    if (IsRefactorToolbarUIEnabled()) {
       _toolbarUIObserverBridge =
           std::make_unique<ToolbarUIObserverBridge>(self);
       _toolbarUIState = toolbarUIState;
@@ -40,7 +40,7 @@
 - (void)setConsumer:(id<PanelContentConsumer>)consumer {
   _consumer = consumer;

-  if (RefactorToolbarUIEnabled()) {
+  if (IsRefactorToolbarUIEnabled()) {
     ToolbarUIRegistry::GetInstance()->AddObserver(&*_toolbarUIObserverBridge);
     [self.consumer updateBottomToolbarHeight:_toolbarUIState.expandedBottomToolbarHeight];
     return;
diff --git a/ios/chrome/browser/fullscreen/ui_bundled/fullscreen_controller_impl.mm b/ios/chrome/browser/fullscreen/ui_bundled/fullscreen_controller_impl.mm
index 141d3da..1647ba7 100644
--- a/ios/chrome/browser/fullscreen/ui_bundled/fullscreen_controller_impl.mm
+++ b/ios/chrome/browser/fullscreen/ui_bundled/fullscreen_controller_impl.mm
@@ -31,7 +31,7 @@ FullscreenControllerImpl::FullscreenControllerImpl(Browser* browser)
       mediator_(browser, this),
       notification_observer_(
           [[FullscreenSystemNotificationObserver alloc]
              initWithController:this
                         mediator:&mediator_]) {
-  ToolbarUIRegistry::GetInstance()->AddObserver(&model_);
+  // If using the new observer approach, we still want to ensure the model_ is registered.
   DCHECK(broadcaster_);
   [broadcaster_ addObserver:bridge_
                 forSelector:@selector(broadcastScrollViewContentSize:)];
@@ -49,14 +49,14 @@ FullscreenControllerImpl::FullscreenControllerImpl(Browser* browser)
     [broadcaster_ addObserver:bridge_
                   forSelector:@selector(broadcastContentScrollOffset:)];
   }
-  if (!RefactorToolbarUIEnabled()) {
+  if (!IsRefactorToolbarUIEnabled()) {
     [broadcaster_ addObserver:bridge_
                   forSelector:@selector(broadcastCollapsedTopToolbarHeight:)];
     [broadcaster_ addObserver:bridge_
                   forSelector:@selector(broadcastExpandedTopToolbarHeight:)];
     [broadcaster_ addObserver:bridge_
                   forSelector:@selector(broadcastCollapsedBottomToolbarHeight:)];
     [broadcaster_ addObserver:bridge_
                   forSelector:@selector(broadcastExpandedBottomToolbarHeight:)];
   }
 }
 
@@ -77,7 +77,7 @@ FullscreenControllerImpl::~FullscreenControllerImpl() {
     [broadcaster_ removeObserver:bridge_
                      forSelector:@selector(broadcastContentScrollOffset:)];
   }
-  if (RefactorToolbarUIEnabled()) {
+  if (IsRefactorToolbarUIEnabled()) {
     ToolbarUIRegistry::GetInstance()->RemoveObserver(&model_);
     return;
   }
diff --git a/ios/chrome/browser/fullscreen/ui_bundled/fullscreen_model.mm b/ios/chrome/browser/fullscreen/ui_bundled/fullscreen_model.mm
index 0e4bb43..e8632c7 100644
--- a/ios/chrome/browser/fullscreen/ui_bundled/fullscreen_model.mm
+++ b/ios/chrome/browser/fullscreen/ui_bundled/fullscreen_model.mm
@@ -94,7 +94,7 @@ void FullscreenModel::SetCollapsedTopToolbarHeight(CGFloat height) {
   // ...
 }

-  if (RefactorToolbarUIEnabled()) {
+  if (IsRefactorToolbarUIEnabled()) {
     return;
   }
   if (AreCGFloatsEqual(GetCollapsedTopToolbarHeight(), height)) {
@@ -117,7 +117,7 @@ void FullscreenModel::SetExpandedTopToolbarHeight(CGFloat height) {
   // ...
 }

-  if (RefactorToolbarUIEnabled()) {
+  if (IsRefactorToolbarUIEnabled()) {
     return;
   }
   if (AreCGFloatsEqual(GetExpandedTopToolbarHeight(), height)) {
@@ -136,7 +136,7 @@ void FullscreenModel::SetExpandedBottomToolbarHeight(CGFloat height) {
   // ...
 }

-  if (RefactorToolbarUIEnabled()) {
+  if (IsRefactorToolbarUIEnabled()) {
     return;
   }
   if (AreCGFloatsEqual(expanded_bottom_toolbar_height_, height)) {
@@ -153,7 +153,7 @@ void FullscreenModel::SetCollapsedBottomToolbarHeight(CGFloat height) {
   // ...
 }

-  if (RefactorToolbarUIEnabled()) {
+  if (IsRefactorToolbarUIEnabled()) {
     return;
   }
   if (AreCGFloatsEqual(collapsed_bottom_toolbar_height_, height)) {
@@ -587,7 +587,7 @@ void FullscreenModel::OnExpandedBottomToolbarHeightBroadcasted(CGFloat height) {
   // ...
 }

-  if (RefactorToolbarUIEnabled()) {
+  if (IsRefactorToolbarUIEnabled()) {
     return;
   }
   SetExpandedBottomToolbarHeight(height);
@@ -607,7 +607,7 @@ void FullscreenModel::OnTopToolbarHeightChanged(CGFloat collapsedHeight,
   // ...
 }

-  if (RefactorToolbarUIEnabled()) {
+  if (IsRefactorToolbarUIEnabled()) {
     SetTopToolbarHeight(collapsedHeight, expandedHeight);
   }
 }
diff --git a/ios/chrome/browser/toolbar/ui_bundled/fullscreen/toolbar_ui.h b/ios/chrome/browser/toolbar/ui_bundled/fullscreen/toolbar_ui.h
index 1a9ceee..0f1a87b 100644
--- a/ios/chrome/browser/toolbar/ui_bundled/fullscreen/toolbar_ui.h
+++ b/ios/chrome/browser/toolbar/ui_bundled/fullscreen/toolbar_ui.h
@@ -33,10 +33,10 @@ @interface ToolbarUIState : NSObject

 @property(nonatomic, assign) CGFloat collapsedBottomToolbarHeight;

-- (void)setterCollapsedTopToolbarHeight:(CGFloat)height;
-- (void)setterExpandedTopToolbarHeight:(CGFloat)height;
-- (void)setterCollapsedBottomToolbarHeight:(CGFloat)height;
-- (void)setterExpandedBottomToolbarHeight:(CGFloat)height;
+- (void)setCollapsedTopToolbarHeight:(CGFloat)height;
+- (void)setExpandedTopToolbarHeight:(CGFloat)height;
+- (void)setCollapsedBottomToolbarHeight:(CGFloat)height;
+- (void)setExpandedBottomToolbarHeight:(CGFloat)height;

 @end
diff --git a/ios/chrome/browser/toolbar/ui_bundled/fullscreen/toolbar_ui.mm b/ios/chrome/browser/toolbar/ui_bundled/fullscreen/toolbar_ui.mm
index 112ccf9..8e7fb75 100644
--- a/ios/chrome/browser/toolbar/ui_bundled/fullscreen/toolbar_ui.mm
+++ b/ios/chrome/browser/toolbar/ui_bundled/fullscreen/toolbar_ui.mm
@@ -10,36 +10,36 @@
 #import "ios/chrome/browser/toolbar/ui_bundled/fullscreen/toolbar_ui.h"
 #import "ios/chrome/browser/toolbar/ui_bundled/fullscreen/toolbar_ui_registry.h"

 @implementation ToolbarUIState {
   CGFloat _collapsedTopToolbarHeight;
   CGFloat _expandedTopToolbarHeight;
   CGFloat _expandedBottomToolbarHeight;
   CGFloat _collapsedBottomToolbarHeight;
 }

 @synthesize collapsedTopToolbarHeight = _collapsedTopToolbarHeight;
 @synthesize expandedTopToolbarHeight = _expandedTopToolbarHeight;
 @synthesize expandedBottomToolbarHeight = _expandedBottomToolbarHeight;
 @synthesize collapsedBottomToolbarHeight = _collapsedBottomToolbarHeight;

-- (void)setterCollapsedTopToolbarHeight:(CGFloat)height {
+- (void)setCollapsedTopToolbarHeight:(CGFloat)height {
   if (_collapsedTopToolbarHeight != height) {
     _collapsedTopToolbarHeight = height;
     ToolbarUIRegistry::GetInstance()->NotifyTopToolbarHeightChanged(
         _collapsedTopToolbarHeight, _expandedTopToolbarHeight);
   }
 }

-- (void)setterExpandedTopToolbarHeight:(CGFloat)height {
+- (void)setExpandedTopToolbarHeight:(CGFloat)height {
   _expandedTopToolbarHeight = height;
   ToolbarUIRegistry::GetInstance()->NotifyTopToolbarHeightChanged(
       _collapsedTopToolbarHeight, _expandedTopToolbarHeight);
 }

-- (void)setterCollapsedBottomToolbarHeight:(CGFloat)height {
+- (void)setCollapsedBottomToolbarHeight:(CGFloat)height {
   _collapsedBottomToolbarHeight = height;
   ToolbarUIRegistry::GetInstance()->NotifyBottomToolbarHeightChanged(
       _collapsedBottomToolbarHeight, _expandedBottomToolbarHeight);
 }

-- (void)setterExpandedBottomToolbarHeight:(CGFloat)height {
+- (void)setExpandedBottomToolbarHeight:(CGFloat)height {
   _expandedBottomToolbarHeight = height;
   ToolbarUIRegistry::GetInstance()->NotifyBottomToolbarHeightChanged(
       _collapsedBottomToolbarHeight, _expandedBottomToolbarHeight);
 }
